/////////////////////////////////////////////////////////////////
//
// Magma code to support the paper "Invariant derivations and trace bounds"
// Find the minimum of the trace on a fundamental representation
// This code is designed to work for G2, F4, and E8
//
/////////////////////////////////////////////////////////////////

load "inv.magma";

////////////////////////////////////////////////////////////////
//
// Find the character values for a fundamental character
// Compared to rep_to_crits in inv.magma, this version is only for 
// type E8 and is optimized to efficiently calculate it while addressing
// the key problems with that case
//
// args:  datum = root datum
//      M = matrix M for your group, as defined in the paper
//      Chi = integer indicating which fundamental character
//
//      mincs (optional): array of minimum values at the corners
//      maxcs (optional): array of maximum values at the corners
//      verbose (optional): boolean, print some extra diagnostic output
//
// returns: list of data about each critical point with a trace that is smaller than that
//      on the corners
//
// for output, no news is good news, meaning minimum is at a corner
//
/////////////////////////////////////////////////////////////////
function fundrep_to_crits(datum, M, Chi : mincs := true, maxcs := true, verbose := false);
  P := CoefficientRing(M);

  if Type(mincs) eq BoolElt or Type(maxcs) eq BoolElt then 
    // They did not provide the corners, so calculate them

    corners:=RadicalDecomposition(Ideal(Eltseq(M)));
    // first minimize over corners

    // pick the fundamental character to minimize
    minc:=Minimum([Rationals()!NormalForm(P.Chi,c):c in corners]);
    assert minc eq mincs[Chi];
    // dimension of irrep
    maxc:=Maximum([Rationals()!NormalForm(P.Chi,c):c in corners]);
    assert maxc eq maxcs[Chi];
  else // they gave us the corners
    minc := mincs[Chi]; // minimum trace on a corner
    maxc := maxcs[Chi]; // dimension of the representation
  end if;

  idl:=Ideal(Eltseq(M[Chi]));
  Groebner(idl);
  assert Dimension(idl) eq 0;
  dg:=Evaluate(HilbertSeries(LeadingMonomialIdeal(idl)),1);
  if verbose then
    dg;
  end if;
  A:=quo<P|idl>;

  if verbose then
    SetVerbose("Groebner",2);
  end if;
  time mp:=MinimalPolynomial(A.Chi);
  if verbose then
    SetVerbose("Groebner",false);
  end if;
  //  save "state1";

  //
  // first deal with rational traces
  //
  rts:=Roots(mp);
  rts:=[r:r in rts|r[1] lt minc];
  time rd1:=[idl+Ideal(P.Chi-r[1]):r in rts];
  time rd1:=&cat[RadicalDecomposition(r):r in rd1];
  rd1:=[r:r in rd1|HilbertSeries(LeadingMonomialIdeal(r)) eq 1];

  cpts:=[[Rationals()|NormalForm(P.i,r):i in [1..Rank(datum)]]:r in rd1];
  goods:=[c:c in cpts|IsNegativeSemiDefinite(Evaluate(M,c))];

  if #goods ne 0 then // did we catch anything?
    print error_str cat "Found traces not in the range";
    for k in [1..#rd1] do
      r := rd1[k];
      c := [Rationals()|NormalForm(P.i,r):i in [1..Rank(datum)]];
      if IsNegativeSemiDefinite(Evaluate(M,c)) then
        print r, c;
      end if;
    end for;
  end if;

  SignAtPlace:=function(x,pl) // return 1 if x is positive at pl, 0 if 0, -1 if negative
    local L,rL;
    if x eq 0 then return 0; end if;
    if NumberField(pl) eq Rationals() then return Integers()!(x/Abs(x)); end if;
    if IsComplex(pl) then return 1; end if;
    if IsSquare(x) then return 1; end if;
    L:=ext<NumberField(pl)|Polynomial([-x,0,1])>;
    rpsL:=RealPlaces(L);
    if exists(rL){r:r in rpsL|Extends(r,pl)} then return 1; else return -1; end if;
  end function;

  ff:=Factorization(mp);
  mps:=[f[1]:f in ff|Degree(f[1]) gt 1];
  goodsb:=[Parent(<1,1,RealField()!1>)|];
  
   // save "state2";
  for p in mps do
    if verbose then
      Index(mps,p),#mps;
    end if;
    K<z>:=ext<Rationals()|p>;
    pls:=RealPlaces(K);

    // tst is positive iff minc>K.1 (what we are seeking) and maxc>-K.1 (otherwise is not from compact group) 
    tst:=(minc-K.1)*(K.1+maxc); 

    // these are the points with traces that lie outside the range predicted by the corners
    pp:=[i:i in [1..#pls]|SignAtPlace(tst,pls[i]) eq 1]; 
    if #pp eq 0 then continue; end if; // we didn't find any

    ii:=idl+Ideal(Evaluate(p,P.Chi));
    iie:=ChangeOrder(ii,<"elimw",[i:i in [1..Rank(datum)]|i ne Chi],[Chi],[WeightedDegree(P.i):i in [1..Rank(datum)]]>);
    time Groebner(iie);
    // check that the objective generates the field
    // (if not, we'd have to do something more complicated!)
    assert &and[TotalDegree(LeadingMonomial(p)) eq 1:p in Basis(iie)|Degree(LeadingMonomial(p),Chi) eq 0];

    // map -M into the reals, check if it is positive semi-definite
    Mx:=Evaluate(M,[NormalForm(Generic(iie).i,iie):i in [1..Rank(datum)]]);
    MxK:=-Evaluate(Mx,[i eq Chi select K.1 else 0:i in [1..Rank(datum)]]); // negative of M at K
    rnk:=Rank(MxK);
    ss:=[Integers()|];
    while #ss lt rnk and #pp gt 0 do
      for i in [Max([0] cat ss)+1..Rank(datum)] do
        ssp:=ss cat [i];

        // check the determinant of the minors of -M: is it >= 0 ?
        dt:=Determinant(Matrix(#ssp,#ssp,[MxK[i,j]:i,j in ssp])); 
        if dt eq 0 then continue; end if; // determinant zero is positive semi-definite
        pp:=[i:i in pp|SignAtPlace(dt,pls[i]) eq 1]; // where is the determinant positive?
        ss:=ssp; break;
      end for;
    end while;

    // pp = list of paces where M is negative semidefinite
    for i in pp do  
      trval := RealEmbeddings(K.1)[i];
      assert (minc-trval)*(trval+maxc) gt 0;  // sanity check that we are in the right range
      Append(~goodsb,<Index(mps,p),i,trval>); // this is something in the range of interest

      // tell someone about it
      printf warn_str cat "Found trace not in the range: %.3o\n", trval;

      if verbose  then
        print p;
        print K;
        print pp;
        print MxK;
      end if;
    end for;
  end for;
  Cputime();
  
  if #goodsb eq 0 then
    printf "Minimum (%o) occurs at a corner\n", minc;
  else
    printf "Found a non-corner minimum (%.3o)\n", Minimum([good[3] : good in goodsb]);
  end if;

  //  save "state3";

  return goodsb;
 
end function;


